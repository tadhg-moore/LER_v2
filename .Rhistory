facet_wrap(~variable, scales = "free_x") #+
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
# geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
resMCMC <- lapply(model, function(m) {
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = model)
})
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = model, parallel = TRUE)
ncores <- detectCores() - 1
library(parallel)
ncores <- detectCores() - 1
clust <- makeCluster(ncores)
# stop cluster
stopCluster(clust)
library(parallel)
ncores <- detectCores() - 1
clust <- makeCluster(ncores)
clusterExport(clust, varlist = list("config_file"),
envir = environment())
clusterEvalQ(clust, library(LakeEnsemblR))
resMCMC <- parLapply(clust, model, function(m) {
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = m)
})
####################################################################################################
#                                                                                                  #
#                   estimate uncretainty from parameter for lake Feeagh                            #
#                                                                                                  #
####################################################################################################
# Johannes Feldbauer                                                                               #
# created: 23.04.2021                                                                              #
# last edited: 23.02.2021                                                                          #
####################################################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
graphics.off()
cat("\14")
# Load libraries
library(gotmtools)
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(FME)
library(reshape2)
setwd("feeagh") # Change working directory to example folder
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# Calibration results -----
res <- read.csv("cali/FLake_MCMC_202102232321.csv")
res
# Calibration results -----
res <- read.csv("cali/FLake_MCMC_202102232321.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
# Calibration results -----
res <- read.csv("cali/GLM_MCMC_202102232321.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
idx <- which.min(res$qual)
res[idx,]
# Calibration results -----
res <- read.csv("cali/GOTM_MCMC_202102232321.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
# Calibration results -----
res <- read.csv("cali/GOTM_MCMC_202102232321.csv")
# Calibration results -----
res <- read.csv("cali/Simstrat_MCMC_202102232321.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
# Calibration results -----
res <- read.csv("cali/GOTM_MCMC_202102240129.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
?FME::modMCMC
modCost(m = 2:7, o = 3:8)
?modCost
?remotes::install_deps
####################################################################################################
#                                                                                                  #
#                   estimate uncretainty from parameter for lake Feeagh                            #
#                                                                                                  #
####################################################################################################
# Johannes Feldbauer                                                                               #
# created: 23.04.2021                                                                              #
# last edited: 23.02.2021                                                                          #
####################################################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
graphics.off()
cat("\14")
# Load libraries
library(gotmtools)
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(FME)
library(reshape2)
setwd("feeagh") # Change working directory to example folder
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "MCMC",
model = model, parallel = TRUE, folder = "lhc_v1")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "MCMC",
model = model, parallel = F, folder = "lhc_v1")
config_file
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
run_ensemble(config_file = config_file, model = model)
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 10, cmethod = "LHC",
model = model, parallel = F, folder = "lhc_v1")
cali_ensemble(config_file = config_file, num = 10, cmethod = "LHC",
model = model, parallel = F, out_f = "lhc_v1")
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "LHC",
model = model, parallel = F, out_f = "lhc_v1")
source("qual_fun.R")
qualfun
source("qual_fun.R")
qualfun()
qual_fun
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
source("qual_fun.R")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "LHC",
model = model, parallel = F, out_f = "lhc_v1", qualfun = qual_fun)
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
source("qual_fun.R")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "LHC",
model = model, parallel = TRUE, out_f = "lhc_v1", qualfun = qual_fun)
# LHC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
source("qual_fun.R")
cali_ensemble(config_file = config_file, num = 1000, cmethod = "LHC",
model = model, parallel = TRUE, out_f = "lhc_v1", qualfun = qual_fun)
cali_files <- list.files("lhc_v1/", full.names = T)
cali_files
lhc_res <- load_LHC_results(config_file, model = model, res_files = cali_files)
lhc_res
str(lhc_res)
mlt1 <- reshape2::melt(lhc_res)
mlt1
head(mlt1)
glm <- lhc_res$GLM
head(glm)
ggplot(glm) +
geom_point(aes(rmse, LL))
ggplot(glm) +
geom_point(aes(rmse, LL)) +
scale_y_log10()
ggplot(glm) +
geom_point(aes(rmse, LL))# +
ggplot(glm) +
geom_point(aes(rmse, LL)) +
scale_y_log10()
head(glm)
mlt <- reshape2::melt(glm[, 7:10], id.vars = "LL")
mlt
ggplot(mlt) +
geom_point(aes(value, LL)) +
facet_wrap(~variable, scales = "free_y") +
geom_smooth() +
scale_y_log10()
ggplot(mlt, aes(value, LL)) +
geom_point() +
facet_wrap(~variable, scales = "free_y") +
geom_smooth() +
scale_y_log10()
ggplot(mlt, aes(value, LL)) +
geom_point() +
facet_wrap(~variable, scales = "free_y") +
# geom_smooth() +
scale_y_log10()
ggplot(mlt, aes(value, LL)) +
geom_point() +
facet_wrap(~variable, scales = "free") +
# geom_smooth() +
scale_y_log10()
ggplot(mlt, aes(value, LL)) +
geom_point() +
facet_wrap(~variable, scales = "free") +
geom_smooth() +
scale_y_log10()
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
library(parallel)
ncores <- detectCores()
clust <- makeCluster(ncores)
clusterExport(clust, varlist = list("config_file"),
envir = environment())
clusterEvalQ(clust, library(LakeEnsemblR))
resMCMC <- parLapply(clust, model, function(m) {
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = m, out_f = "mcmc_v1")
})
cali_ensemble(config_file = config_file, num = 5, cmethod = "MCMC",
model = model, parallel = F, out_f = "testv1")
####################################################################################################
#                                                                                                  #
#                   estimate uncretainty from parameter for lake Feeagh                            #
#                                                                                                  #
####################################################################################################
# Johannes Feldbauer                                                                               #
# created: 23.04.2021                                                                              #
# last edited: 23.02.2021                                                                          #
####################################################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
graphics.off()
cat("\14")
# Load libraries
library(gotmtools)
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(FME)
library(reshape2)
setwd("feeagh") # Change working directory to example folder
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 5, cmethod = "MCMC",
model = model, parallel = F, out_f = "testv1")
config_file
model
cali_ensemble(config_file = config_file, num = 5, cmethod = "MCMC",
model = model, parallel = T, out_f = "testv1")
####################################################################################################
#                                                                                                  #
#                   estimate uncretainty from parameter for lake Feeagh                            #
#                                                                                                  #
####################################################################################################
# Johannes Feldbauer                                                                               #
# created: 23.04.2021                                                                              #
# last edited: 23.02.2021                                                                          #
####################################################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
graphics.off()
cat("\14")
# Load libraries
library(gotmtools)
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(FME)
library(reshape2)
setwd("feeagh") # Change working directory to example folder
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 5, cmethod = "MCMC",
model = model, parallel = F, out_f = "testv1")
####################################################################################################
#                                                                                                  #
#                   estimate uncretainty from parameter for lake Feeagh                            #
#                                                                                                  #
####################################################################################################
# Johannes Feldbauer                                                                               #
# created: 23.04.2021                                                                              #
# last edited: 23.02.2021                                                                          #
####################################################################################################
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
graphics.off()
cat("\14")
# Load libraries
library(gotmtools)
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(FME)
library(reshape2)
setwd("feeagh") # Change working directory to example folder
##---------------- calibrate and run models with daily forcing ----------------
# Set config file & models for daily forcing data
config_file <- 'LakeEnsemblR_pars_uncert.yaml'
model <-  c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake", "MyLake")
cali_ensemble(config_file = config_file, num = 5, cmethod = "MCMC",
model = model, parallel = F, out_f = "testv1")
library(parallel)
ncores <- detectCores()
clust <- makeCluster(ncores)
clusterExport(clust, varlist = list("config_file"),
envir = environment())
clusterEvalQ(clust, library(LakeEnsemblR))
resMCMC <- parLapply(clust, model, function(m) {
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = m, out_f = "mcmc_v1")
})
# stop cluster
stopCluster(clust)
# MCMC method
# model <-  c("GOTM")
model <-  c("GLM", "GOTM", "Simstrat", "FLake")
library(parallel)
ncores <- detectCores()
clust <- makeCluster(ncores)
clusterExport(clust, varlist = list("config_file"),
envir = environment())
clusterEvalQ(clust, library(LakeEnsemblR))
resMCMC <- parLapply(clust, model, function(m) {
cali_ensemble(config_file = config_file, num = 5000, cmethod = "MCMC",
model = m, out_f = "mcmc_v1")
})
# stop cluster
stopCluster(clust)
21:23
resMCMC
# Calibration results -----
res <- read.csv("mcmc_v1/FLake_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
# Calibration results -----
res <- read.csv("mcmc_v1/GLM_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
# Calibration results -----
res <- read.csv("mcmc_v1/GOTM_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_x_log10()
# Calibration results -----
res <- read.csv("mcmc_v1/Simstrat_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_x_log10()
# Calibration results -----
res <- read.csv("mcmc_v1/Simstrat_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_x_log10()
# Calibration results -----
res <- read.csv("mcmc_v1/FLake_MCMC_202102250222.csv")
res$run <- 1:nrow(res)
mlt <- reshape2::melt(res, id.vars = c("qual", "run"))
ggplot(mlt) +
# geom_point(aes(run, value)) +
geom_line(aes(run, value)) +
geom_smooth(aes(run, value)) +
facet_wrap(~variable, scales = "free_y") +
scale_y_log10()
ggplot(mlt) +
geom_point(aes(value, qual)) +
# geom_line(aes(run, value)) +
geom_smooth(aes(value, qual)) +
facet_wrap(~variable, scales = "free_x") +
scale_x_log10()
